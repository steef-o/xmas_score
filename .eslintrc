{
  "plugins": ["react","react-hooks", "@typescript-eslint", "import", "jsx-a11y", "prettier"],
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:jsx-a11y/recommended",
    "plugin:react/jsx-runtime",
    "plugin:prettier/recommended",
    "prettier",
    "plugin:import/recommended",
    "plugin:import/typescript",
    "plugin:eslint-comments/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./tsconfig.json",
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": "latest",
    "sourceType": "module",
    "extraFileExtensions": [".css"]
  },

  "rules": {

    /*
     * eslint rules https://eslint.org/docs/rules
  Notes:
  https://eslint.org/docs/rules/no-dupe-args
  https://eslint.org/docs/rules/no-sequences
  import/no-nodejs-modules
  no-internal-modules.md
  sort-imports replace with autofixer https://github.com/eslint/eslint/issues/11542
  */

    /*
     * Category: Possible Errors
     */

    // Disallow await inside of for loops
    "no-await-in-loop": "warn",
    // Disallow constant expressions in conditions, i.e. if (true)
    "no-constant-condition": "warn",
    // Disallow the use of debugger
    "no-debugger": "warn",
    // Disallow empty block statements
    "no-empty": "warn",
    "no-extra-boolean-cast": ["warn", { "enforceForLogicalOperands": true }],
    // Disallow returning values from Promise executor functions
    "no-promise-executor-return": "warn",
    // Disallow template literal placeholder syntax in regular strings - bad: "${someValue}", good: `${someValue}`
    "no-template-curly-in-string": "warn",
    // Disallow loops with a body that allows only one iteration
    "no-unreachable-loop": "warn",
    // Disallow use of optional chaining in contexts where the undefined value is not allowed: (obj?.foo)() => (obj?.foo)?.()
    "no-unsafe-optional-chaining": ["error", { "disallowArithmeticOperators": true }],
    // Disallow useless backreferences in regular expressions
    "no-useless-backreference": "warn",
    // Disallow assignments that can lead to race conditions due to usage of await or yield
    "require-atomic-updates": "warn",
    "valid-typeof": ["error", { "requireStringLiterals": true }],

    // suppress errors for missing 'import React' in files
    "react/react-in-jsx-scope": "off",
    // allow jsx syntax in js files (for next.js project)
    "react/jsx-filename-extension": [1, { "extensions": [".js",".ts", ".tsx"] }],

    /*
     * Category: Best Practices
     */

    // require return statements to either always or never specify values
    "consistent-return": "warn",
    /*
     * TODO curly rule doesn't allow ignoring unneccessary braces (https://github.com/eslint/eslint/issues/6141)
     * Can live without for now: prettier removes newline in if (condition) \n statement unless the line is too long
     * Would like to enable just the "consistent" option
     */
    // "curly": ["error", "multi", "consistent"],
    // Enforce default clauses in switch statements to be last
    "default-case-last": "warn",
    "eqeqeq": ["warn", "always"],
    "grouped-accessor-pairs": "warn",
    "no-alert": "warn",
    "no-caller": "error",
    "no-constructor-return": "warn",
    "no-else-return": "warn",
    "no-empty-pattern": "warn",
    "no-eval": "error",
    // Disallow Extending of Native Objects, i.e. Object.prototype.extra = 55;
    "no-extend-native": "error",
    // Disallow unnecessary function binding
    "no-extra-bind": "warn",
    // Disallow Unnecessary Labels
    "no-extra-label": "warn",
    // Disallow implied eval(), i.e. setTimeout("alert('Hi!');", 100);
    "no-implied-eval": "error",
    "no-new-wrappers": "warn",
    "no-nonoctal-decimal-escape": "error",
    "no-octal-escape": "error",
    "no-param-reassign": "warn",
    "no-proto": "error",
    "no-return-assign": "warn",
    // Disallows unnecessary return await (small performance increase) - see https://jakearchibald.com/2017/await-vs-return-vs-return-await/
    "no-return-await": "warn",
    // Disallow javascript: URLs (works like eval())
    "no-script-url": "error",
    "no-self-compare": "warn",
    "no-unmodified-loop-condition": "warn",
    // Disallow unnecessary .call() and .apply()
    "no-useless-call": "warn",
    // Disallow unnecessary catch clauses, i.e. catch(e) { throw e; }
    "no-useless-catch": "warn",
    // Disallow unnecessary concatenation of strings, i.e. "a" + "b" => "ab"
    "no-useless-concat": "warn",
    "no-useless-return": "warn",
    // Disallow with statements ( with(something) {} ), use descructuring instead
    "no-with": "error",
    // Require using Error objects as Promise rejection reasons
    "prefer-promise-reject-errors": "warn",
    "prefer-regex-literals": "warn",
    // Disallow Yoda conditions ("red" === color => color === "red")
    "yoda": ["warn", "never", { "exceptRange": true }],
    // Disallow labels that are variable names
    "no-label-var": "error",
    // Disallow specific global variables
    "no-restricted-globals": ["error", "event"],
    // Consider turning this on in the future, see https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-shadow.md
    "no-shadow": "off",

    /*
     * Category: Stylistic Issues
     * Most of eslint's rules in this category are handled by prettier
     */

    // TODO remove in favor of ts naming conventions?
    //        "camelcase": ["warn", { "allow": ["^UNSAFE_"] }],
    "capitalized-comments": "off",
    // Prefer "function foo(){..." over "const foo = function{..."
    "func-style": ["warn", "declaration", { "allowArrowFunctions": true }],
    "lines-between-class-members": ["warn", "always", { "exceptAfterSingleLine": true }],
    "max-depth": ["warn", 3],
    "max-lines": [
      "warn",
      {
        "max": 200,
        "skipBlankLines": true,
        "skipComments": true
      }
    ],
    "max-params": ["warn", { "max": 4 }],
    /*
     * Doesn't know how to ignore JSX. Can use override, but would like to configure utils functions (that can also
     * appear in .tsx files) and components separately.
     */
    "max-lines-per-function": "off",
    "max-nested-callbacks": ["warn", { "max": 4 }],
    "max-statements-per-line": [
      "warn",
      {
        "max": 2
      }
    ],

    /*
     * Disallows consecutive line comments in favor of block comments.
     * Additionally, requires block comments to have an aligned * character before each line.
     */
    "multiline-comment-style": ["warn", "starred-block"],
    "new-cap": "warn",
    "new-parens": ["warn", "always"],
    // if (a) {...} else { if (b) {...} } => if (a) {...} else if (b) {...}
    "no-lonely-if": "warn",
    // Disallows: const foo = bar = 0
    "no-multi-assign": "warn",
    // !a ? c : b => a ? b : c
    "no-negated-condition": "warn",
    // Disallow Object constructors, new Object() => {}
    "no-new-object": "warn",
    /*
     * Disallow newline of single-line statements if (a) \n statement; (if, else, while, do-while and for)
     * Before disabling this rule, read https://www.imperialviolet.org/2014/02/22/applebug.html
     */
    "nonblock-statement-body-position": "error",

    "one-var": ["warn", "never"],

    "prefer-exponentiation-operator": "warn",

    // Prefer use of an object spread over Object.assign
    "prefer-object-spread": "warn",
    "spaced-comment": ["warn", "always"],

    /*
     * Category: ECMAScript 6
     */
    // Use braces in arrow function body only when needed () => { return value; } => () => value
    "arrow-body-style": ["warn", "as-needed"],
    "no-useless-computed-key": "warn",
    "no-useless-rename": "warn",
    "no-var": "error",
    "object-shorthand": ["warn", "always"],
    // Prefer arrow functions over function expressions in callbacks handle(function (event) { ... }) => handle((event) => {...})
    "prefer-arrow-callback": "warn",
    "prefer-const": "warn",
    // Disallow parseInt() and Number.parseInt() in favor of binary, octal, and hexadecimal literals
    "prefer-numeric-literals": "warn",
    // Suggest using the rest parameters instead of arguments
    "prefer-rest-params": "warn",
    // Suggest using spread syntax instead of .apply()
    "prefer-spread": "warn",
    // Suggest using template literals instead of string concatenation
    "prefer-template": "warn",

    /*
     * Plugin: Prettier
     * Consider using https://github.com/prettier/prettier-eslint for better control?
     */

    "prettier/prettier": [
      "warn",
      {
        "printWidth": 100,
        "useTabs": false,
        "tabWidth": 2,
        "endOfLine": "auto",
        "trailingComma": "all"
      }
    ],

    /*
     * Plugin: typescript-eslint
     * https://github.com/typescript-eslint
     */

    // Use T[] and readonly T[] instead of Array<T> and ReadonlyArray<T>
    "@typescript-eslint/array-type": ["warn", { "default": "array" }],
    // Disallow awaiting a value that is not a Thenable
    "@typescript-eslint/await-thenable": "warn",
    // Bans @ts-ignore and @ts-nocheck comments, only allow @ts-expect-error with description
    "@typescript-eslint/ban-ts-comment": [
      "error",
      {
        "ts-expect-error": "allow-with-description",
        "ts-ignore": true, // use ts-expect-error instead
        "ts-nocheck": true,
        "minimumDescriptionLength": 3
      }
    ],
    // Bans specific types from being used (String => string, Function etc.)
    "@typescript-eslint/ban-types": "warn",
    // Prefer using Record<string, T> instead of defining custom types like { [key: string]: T }
    "@typescript-eslint/consistent-indexed-object-style": ["warn", "record"],
    "@typescript-eslint/consistent-type-assertions": "off",
    // Prefer using interface over type for object definitions
    "@typescript-eslint/consistent-type-definitions": ["warn", "interface"],
    // Enforce default parameters to be last
    "@typescript-eslint/default-param-last": "error",
    // Enforce dot notation whenever possible ( a.b over a["b"] )
    "@typescript-eslint/dot-notation": "warn",
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/explicit-member-accessibility": [
      "warn",
      {
        "accessibility": "no-public",
        "overrides": {
          "properties": "explicit"
        }
      }
    ],
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "init-declarations": "off",
    "@typescript-eslint/init-declarations": ["warn", "always"],
    "@typescript-eslint/method-signature-style": ["warn"],
    "@typescript-eslint/naming-convention": [
      // TODO consider allowing PascalCase properties? useful in some cases
      "warn",
      // use camel and pascal case by default
      {
        "selector": "default",
        "format": ["camelCase"]
      },
      {
        "selector": "variable",
        "format": ["camelCase", "PascalCase", "UPPER_CASE"]
      },
      // boolean variables are prefixed with a verb
      {
        "selector": "variable",
        "types": ["boolean"],
        "format": ["camelCase"]
        //        "prefix": ["is", "should", "has", "can", "did", "will", "show", "hide"]
      },
      {
        "selector": "function",
        "format": ["camelCase", "PascalCase"]
      },
      {
        "selector": "typeLike",
        "format": ["PascalCase"]
      },
      // private members are prefixed with underscore
      {
        "selector": "memberLike",
        "modifiers": ["private"],
        "format": ["camelCase"],
        "leadingUnderscore": "require"
      },
      {
        "selector": "enumMember",
        "format": ["UPPER_CASE","PascalCase"]
      },
      // type parameters are prefixed with T: T, TResult, TError
      {
        "selector": "typeParameter",
        "format": ["PascalCase"],
        "prefix": ["T"]
      },
      // interfaces are NOT prefixed with I
      {
        "selector": "interface",
        "format": ["PascalCase"],
        "custom": {
          "regex": "^I[A-Z]",
          "match": false
        }
      }
    ],

    // Confusing: a! === b => b === a!
    "@typescript-eslint/no-confusing-non-null-assertion": "warn",
    // Requires expressions of type void to appear in statement position
    "@typescript-eslint/no-confusing-void-expression": ["warn", { "ignoreArrowShorthand": true }],
    // Disallow duplicate class members
    "no-dupe-class-members": "off",
    "@typescript-eslint/no-dupe-class-members": ["error"],

    "no-duplicate-imports": "off",
    "@typescript-eslint/no-duplicate-imports": ["warn"],
    // Consider turning this on? Can be annoying in some cases
    "no-empty-function": "off",
    "@typescript-eslint/no-empty-function": "off",
    "@typescript-eslint/no-empty-interface": "warn",

    /*
     * Disallow explicit any. Autofix to unknown instead of any where possible.
     * See https://devblogs.microsoft.com/typescript/announcing-typescript-3-0-rc-2/#the-unknown-type
     */
    "@typescript-eslint/no-explicit-any": [
      "warn",
      {
        "fixToUnknown": true,
        "ignoreRestArgs": true
      }
    ],
    "@typescript-eslint/no-extra-non-null-assertion": "warn",
    // Forbids the use of classes as namespaces
    "@typescript-eslint/no-extraneous-class": "warn",
    // Requires Promise-like values to be handled appropriately
    "@typescript-eslint/no-floating-promises": "warn",
    // Disallow usage of the implicit any type in catch clauses, use unknown instead
    "@typescript-eslint/no-implicit-any-catch": "warn",
    // Disallows explicit type declarations for variables initialized to a number, string, or boolean
    "@typescript-eslint/no-inferrable-types": [
      "warn",
      {
        "ignoreParameters": true,
        "ignoreProperties": true
      }
    ],
    // Disallow this keywords outside of classes or class-like objects
    "no-invalid-this": "off",
    "@typescript-eslint/no-invalid-this": ["error"],
    // Disallow defining functions in loops
    "no-loop-func": "off",
    "@typescript-eslint/no-loop-func": ["warn"],
    // Disallow number literals that lose precision
    "no-loss-of-precision": "warn",
    "@typescript-eslint/no-loss-of-precision": ["warn"],
    // Disallow magic numbers/constants in the code, i.e. a[300], 40 * 40
    "no-magic-numbers": "off",
    "@typescript-eslint/no-magic-numbers": [
      "warn",
      {
        "ignore": [-1, 0, 1, 2, 24, 60, 1000], // common indexes and values when working with time
        "ignoreDefaultValues": true,
        "enforceConst": true,
        // Additional rules by typescript-eslint
        "ignoreEnums": true,
        "ignoreNumericLiteralTypes": true,
        "ignoreReadonlyClassProperties": true
      }
    ],

    "@typescript-eslint/no-misused-new": "warn",
    "@typescript-eslint/no-misused-promises": "warn",
    "@typescript-eslint/no-namespace": "warn",
    "@typescript-eslint/no-non-null-asserted-optional-chain": "warn",
    "@typescript-eslint/no-non-null-assertion": "warn",
    "@typescript-eslint/no-parameter-properties": "off",
    "no-redeclare": "off",
    "@typescript-eslint/no-redeclare": ["warn"],
    "@typescript-eslint/no-require-imports": "error",
    "@typescript-eslint/no-this-alias": "warn",
    // Restrict what can be thrown as an exception
    "no-throw-literal": "warn",
    "@typescript-eslint/no-throw-literal": ["warn"],

    "@typescript-eslint/no-unnecessary-boolean-literal-compare": ["warn"],
    // Prevents conditionals where the type is always truthy or always falsy
    "@typescript-eslint/no-unnecessary-condition": "warn",
    "@typescript-eslint/no-unnecessary-qualifier": "warn",
    "@typescript-eslint/no-unnecessary-type-assertion": "warn",
    "@typescript-eslint/no-unnecessary-type-constraint": "warn",
    "@typescript-eslint/no-unsafe-argument": "warn",
    "@typescript-eslint/no-unsafe-assignment": "warn",
    "@typescript-eslint/no-unsafe-call": "warn",
    "@typescript-eslint/no-unsafe-member-access": "error",
    "@typescript-eslint/no-unsafe-return": "error",
    // No 1 + 1; or similar unused expressions (not assigned or returned etc.)
    "no-unused-expressions": "off",
    "@typescript-eslint/no-unused-expressions": ["warn", { "enforceForJSX": true }],
    "no-useless-constructor": "off",
    "@typescript-eslint/no-useless-constructor": "warn",
    "@typescript-eslint/non-nullable-type-assertion-style": "warn",
    "@typescript-eslint/prefer-as-const": "warn",
    "@typescript-eslint/prefer-for-of": "warn",
    // Use function types instead of interfaces with call signatures
    "@typescript-eslint/prefer-function-type": "warn",
    "@typescript-eslint/prefer-literal-enum-member": ["warn"], // TODO update to latest and enable { "allowBitwiseExpressions": true }
    "@typescript-eslint/prefer-nullish-coalescing": "warn",
    "@typescript-eslint/prefer-optional-chain": "warn",
    // TODO this is nice, but not sure if the extra readonly syntax everywhere is worth it
    // "@typescript-eslint/prefer-readonly-parameter-types": "warn",
    // Requires that private members are marked as readonly if they're never modified outside of the constructor (
    "@typescript-eslint/prefer-readonly": "warn",
    // [1, 2, 3].reduce((arr, num) => ..., [] as number[]); => [1, 2, 3].reduce<number[]>((arr, num) => ..., []);
    "@typescript-eslint/prefer-reduce-type-parameter": "warn",
    "@typescript-eslint/prefer-regexp-exec": "warn",
    "@typescript-eslint/prefer-string-starts-ends-with": "warn",
    // Requires Array#sort calls to always provide a compareFunction as it can lead to bugs [1,2,10].sort() => [1,10,2]
    "@typescript-eslint/require-array-sort-compare": ["warn", { "ignoreStringArrays": true }],
    // Disallow async functions which have no await expression
    "require-await": "off",
    "@typescript-eslint/require-await": "warn",
    "@typescript-eslint/strict-boolean-expressions": [
      "warn",
      {
        "allowNullableObject": true,
        "allowNullableBoolean": true,
        "allowNullableString": true
      }
    ],
    "@typescript-eslint/switch-exhaustiveness-check": "warn",
    "@typescript-eslint/unbound-method": "warn",

    // TODO remove, replaced by consistent-type-assertions
    "@typescript-eslint/no-object-literal-type-assertion": "off",

    /*
     * Plguin: import https://github.com/benmosher/eslint-plugin-import
     */
    "import/order": [
      "warn",
      {
        "groups": ["builtin", "external", "internal", ["parent", "sibling", "index"], "object"],
        "newlines-between": "always",
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": false
        }
      }
    ],
    "import/exports-last": "off",
    "import/newline-after-import": ["warn", { "count": 1 }],
    "import/no-absolute-path": "warn",
    "import/no-deprecated": "warn",
    "import/no-extraneous-dependencies": "error",
    "import/no-mutable-exports": "warn",
    "import/no-named-as-default-member": "warn",
    "import/no-self-import": "warn",
    "import/no-unresolved": "off",
    "import/no-useless-path-segments": ["warn", { "noUselessIndex": true }],

    /*
     * Plugin: eslint-comments https://github.com/mysticatea/eslint-plugin-eslint-comments
     */
    "eslint-comments/disable-enable-pair": ["error", { "allowWholeFile": true }],
    "eslint-comments/no-duplicate-disable": "warn",
    "eslint-comments/no-unused-disable": "error", // This rule can be buggy, remove if problematic
    // Require descriptions for eslint disable comments, they have to be on the same line prefixed with --
    "eslint-comments/require-description": ["error", { "ignore": ["eslint-enable"] }],
    "react/prop-types": "off"
  }
}
